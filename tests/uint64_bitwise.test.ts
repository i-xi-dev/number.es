import { assertStrictEquals, assertThrows } from "./deps.ts";
import { BigUint64 } from "../mod.ts";

Deno.test("BigUint64.bitwiseAnd(number, number)", () => {
  assertStrictEquals(
    BigUint64.bitwiseAnd(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.bitwiseAnd(
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
    ),
    0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
  );
  assertStrictEquals(
    BigUint64.bitwiseAnd(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.bitwiseAnd(
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );

  assertStrictEquals(
    BigUint64.bitwiseAnd(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.bitwiseAnd(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.bitwiseAnd(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.bitwiseAnd(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
  );

  assertThrows(
    () => {
      BigUint64.bitwiseAnd(0x100 as unknown as BigUint64, 0n);
    },
    TypeError,
    "a",
  );
  assertThrows(
    () => {
      BigUint64.bitwiseAnd(0n, 0x100 as unknown as BigUint64);
    },
    TypeError,
    "b",
  );
});

Deno.test("BigUint64.bitwiseOr(number, number)", () => {
  assertStrictEquals(
    BigUint64.bitwiseOr(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.bitwiseOr(
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
    ),
    0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
  );
  assertStrictEquals(
    BigUint64.bitwiseOr(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
    ),
    0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
  );
  assertStrictEquals(
    BigUint64.bitwiseOr(
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
  );

  assertStrictEquals(
    BigUint64.bitwiseOr(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.bitwiseOr(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
  );
  assertStrictEquals(
    BigUint64.bitwiseOr(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
    ),
    0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
  );
  assertStrictEquals(
    BigUint64.bitwiseOr(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
  );

  assertThrows(
    () => {
      BigUint64.bitwiseOr(0x100 as unknown as BigUint64, 0n);
    },
    TypeError,
    "a",
  );
  assertThrows(
    () => {
      BigUint64.bitwiseOr(0n, 0x100 as unknown as BigUint64);
    },
    TypeError,
    "b",
  );
});

Deno.test("BigUint64.bitwiseXOr(number, number)", () => {
  assertStrictEquals(
    BigUint64.bitwiseXOr(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.bitwiseXOr(
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.bitwiseXOr(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
    ),
    0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
  );
  assertStrictEquals(
    BigUint64.bitwiseXOr(
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
  );

  assertStrictEquals(
    BigUint64.bitwiseXOr(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.bitwiseXOr(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
  );
  assertStrictEquals(
    BigUint64.bitwiseXOr(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
    ),
    0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
  );
  assertStrictEquals(
    BigUint64.bitwiseXOr(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );

  assertThrows(
    () => {
      BigUint64.bitwiseXOr(0x100 as unknown as BigUint64, 0n);
    },
    TypeError,
    "a",
  );
  assertThrows(
    () => {
      BigUint64.bitwiseXOr(0n, 0x100 as unknown as BigUint64);
    },
    TypeError,
    "b",
  );
});
