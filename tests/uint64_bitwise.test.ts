import { assertStrictEquals, assertThrows } from "./deps.ts";
import { BigUint64 } from "../mod.ts";

Deno.test("BigUint64.bitwiseAnd(number, number)", () => {
  assertStrictEquals(
    BigUint64.bitwiseAnd(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.bitwiseAnd(
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
    ),
    0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
  );
  assertStrictEquals(
    BigUint64.bitwiseAnd(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.bitwiseAnd(
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );

  assertStrictEquals(
    BigUint64.bitwiseAnd(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.bitwiseAnd(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.bitwiseAnd(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.bitwiseAnd(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
  );

  assertThrows(
    () => {
      BigUint64.bitwiseAnd(0x100 as unknown as BigUint64, 0n);
    },
    TypeError,
    "a",
  );
  assertThrows(
    () => {
      BigUint64.bitwiseAnd(0n, 0x100 as unknown as BigUint64);
    },
    TypeError,
    "b",
  );
});

Deno.test("BigUint64.bitwiseOr(number, number)", () => {
  assertStrictEquals(
    BigUint64.bitwiseOr(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.bitwiseOr(
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
    ),
    0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
  );
  assertStrictEquals(
    BigUint64.bitwiseOr(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
    ),
    0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
  );
  assertStrictEquals(
    BigUint64.bitwiseOr(
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
  );

  assertStrictEquals(
    BigUint64.bitwiseOr(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.bitwiseOr(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
  );
  assertStrictEquals(
    BigUint64.bitwiseOr(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
    ),
    0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
  );
  assertStrictEquals(
    BigUint64.bitwiseOr(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
  );

  assertThrows(
    () => {
      BigUint64.bitwiseOr(0x100 as unknown as BigUint64, 0n);
    },
    TypeError,
    "a",
  );
  assertThrows(
    () => {
      BigUint64.bitwiseOr(0n, 0x100 as unknown as BigUint64);
    },
    TypeError,
    "b",
  );
});

Deno.test("BigUint64.bitwiseXOr(number, number)", () => {
  assertStrictEquals(
    BigUint64.bitwiseXOr(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.bitwiseXOr(
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.bitwiseXOr(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
    ),
    0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
  );
  assertStrictEquals(
    BigUint64.bitwiseXOr(
      0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111n,
  );

  assertStrictEquals(
    BigUint64.bitwiseXOr(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.bitwiseXOr(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
    ),
    0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
  );
  assertStrictEquals(
    BigUint64.bitwiseXOr(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
    ),
    0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
  );
  assertStrictEquals(
    BigUint64.bitwiseXOr(
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
      0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );

  assertThrows(
    () => {
      BigUint64.bitwiseXOr(0x100 as unknown as BigUint64, 0n);
    },
    TypeError,
    "a",
  );
  assertThrows(
    () => {
      BigUint64.bitwiseXOr(0n, 0x100 as unknown as BigUint64);
    },
    TypeError,
    "b",
  );
});

Deno.test("BigUint64.rotateLeft(number, number)", () => {
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      0,
    ),
    0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      1,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      2,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000010n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      3,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000100n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      4,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00001000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      5,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00010000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      6,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00100000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      7,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_01000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      8,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_10000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      9,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000001_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      10,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000010_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      11,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000100_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      12,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00001000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      13,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00010000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      14,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00100000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      15,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_01000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      16,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_10000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      17,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000001_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      18,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000010_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      19,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000100_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      20,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00001000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      21,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00010000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      22,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00100000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      23,
    ),
    0b00000000_00000000_00000000_00000000_00000000_01000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      24,
    ),
    0b00000000_00000000_00000000_00000000_00000000_10000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      25,
    ),
    0b00000000_00000000_00000000_00000000_00000001_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      26,
    ),
    0b00000000_00000000_00000000_00000000_00000010_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      27,
    ),
    0b00000000_00000000_00000000_00000000_00000100_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      28,
    ),
    0b00000000_00000000_00000000_00000000_00001000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      29,
    ),
    0b00000000_00000000_00000000_00000000_00010000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      30,
    ),
    0b00000000_00000000_00000000_00000000_00100000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      31,
    ),
    0b00000000_00000000_00000000_00000000_01000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      32,
    ),
    0b00000000_00000000_00000000_00000000_10000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      33,
    ),
    0b00000000_00000000_00000000_00000001_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      34,
    ),
    0b00000000_00000000_00000000_00000010_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      35,
    ),
    0b00000000_00000000_00000000_00000100_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      36,
    ),
    0b00000000_00000000_00000000_00001000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      37,
    ),
    0b00000000_00000000_00000000_00010000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      38,
    ),
    0b00000000_00000000_00000000_00100000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      39,
    ),
    0b00000000_00000000_00000000_01000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      40,
    ),
    0b00000000_00000000_00000000_10000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      41,
    ),
    0b00000000_00000000_00000001_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      42,
    ),
    0b00000000_00000000_00000010_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      43,
    ),
    0b00000000_00000000_00000100_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      44,
    ),
    0b00000000_00000000_00001000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      45,
    ),
    0b00000000_00000000_00010000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      46,
    ),
    0b00000000_00000000_00100000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      47,
    ),
    0b00000000_00000000_01000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      48,
    ),
    0b00000000_00000000_10000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      49,
    ),
    0b00000000_00000001_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      50,
    ),
    0b00000000_00000010_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      51,
    ),
    0b00000000_00000100_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      52,
    ),
    0b00000000_00001000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      53,
    ),
    0b00000000_00010000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      54,
    ),
    0b00000000_00100000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      55,
    ),
    0b00000000_01000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      56,
    ),
    0b00000000_10000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      57,
    ),
    0b00000001_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      58,
    ),
    0b00000010_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      59,
    ),
    0b00000100_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      60,
    ),
    0b00001000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      61,
    ),
    0b00010000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      62,
    ),
    0b00100000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      63,
    ),
    0b01000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      64,
    ),
    0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      65,
    ),
    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001n,
  );
  assertStrictEquals(
    BigUint64.rotateLeft(
      0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
      -1,
    ),
    0b01000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000n,
  );

  assertStrictEquals(BigUint64.rotateLeft(0n, -1), 0n);
  assertStrictEquals(BigUint64.rotateLeft(0n, 0), 0n);
  assertStrictEquals(BigUint64.rotateLeft(0n, 1), 0n);
  assertStrictEquals(BigUint64.rotateLeft(0n, 101), 0n);

  assertThrows(
    () => {
      BigUint64.rotateLeft(0x10000000000000000n as BigUint64, 1);
    },
    TypeError,
    "source",
  );
  assertThrows(
    () => {
      BigUint64.rotateLeft(-1n as BigUint64, 1);
    },
    TypeError,
    "source",
  );
  assertThrows(
    () => {
      BigUint64.rotateLeft(1n, 3.1);
    },
    TypeError,
    "amount",
  );
});
